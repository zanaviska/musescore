// NOTE: I prefer to put this in each project, at "<PROJECT>/.vscode/settings.json"
// This makes it easier to collaborate with others, as they can clone the repo
// and have a mostly-working cross-platform VS Code config
{
    // "editor.formatOnSave": true,
    // Disable formatting and intellisense engine in Microsoft C/C++ extension (provides debugging)
    // This way you can have the other features of the extension but use clangd for LSP
    "C_Cpp.formatting": "Disabled",
    "C_Cpp.intelliSenseEngine": "Default",
    // Configure .clangd arguments
    "clangd.checkUpdates": true,
    "clangd.onConfigChanged": "restart",
    "clangd.arguments": [
        // --background-index              - Index project code in the background and persist index on disk.
        "-background-index",
        // --header-insertion=<value>      - Add #include directives when accepting code completions
        //  =iwyu                          -   Include what you use. Insert the owning header for top-level symbols, unless the header is already directly included or the symbol is forward-declared
        //  =never                         -   Never insert #include directives as part of code completion
        "-header-insertion=iwyu",
        // --header-insertion-decorators   - Prepend a circular dot or space before the completion label, depending on whether an include line will be inserted or not
        "-header-insertion-decorators",
        // --inlay-hints                   - Enable preview of InlayHints feature
        "--inlay-hints",
        // --function-arg-placeholders     - When disabled, completions contain only parentheses for function calls. When enabled, completions also contain placeholders for method parameters
        "--function-arg-placeholders",
    ],
    // Prefer "Ninja"
    "cmake.generator": "Ninja",
    "cmake.sourceDirectory": "${workspaceFolder}",
    // Set build directory to format: "./build/clang13-msvc-x86_64/debug
    "cmake.buildDirectory": "${workspaceFolder}/../build/${buildKit}/${buildType}",
    // Copy compile_commands.json from the build folder to root folder, so that clangd can use it
    // NOTE: Alternatively, you can pass --compile-commands-dir=<string> in the "clangd.arguments" array above
    "cmake.copyCompileCommands": "${workspaceFolder}/compile_commands.json",
    "cmake.configureSettings": {
        "CMAKE_EXPORT_COMPILE_COMMANDS": 1,
    }
}